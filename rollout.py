#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ —Å—Ä–µ–¥–µ Rogue.
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏–∑ checkpoint –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç rollout —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π.
"""

import argparse
import os
import sys
import time
from typing import Optional

import numpy as np
from stable_baselines3 import PPO

import env


def parse_args():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description="–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ Rogue",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    
    parser.add_argument(
        "checkpoint_path",
        type=str,
        help="–ü—É—Ç—å –∫ .zip —Ñ–∞–π–ª—É —Å checkpoint'–æ–º –º–æ–¥–µ–ª–∏"
    )
    
    parser.add_argument(
        "--episodes",
        type=int,
        default=3,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"
    )
    
    parser.add_argument(
        "--max_steps",
        type=int,
        default=50,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ —ç–ø–∏–∑–æ–¥–µ"
    )
    
    parser.add_argument(
        "--delay",
        type=float,
        default=0.5,
        help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"
    )
    
    parser.add_argument(
        "--deterministic",
        action="store_true",
        help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫—É—é –ø–æ–ª–∏—Ç–∏–∫—É (–±–µ–∑ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏)"
    )
    
    parser.add_argument(
        "--no-render",
        action="store_true",
        help="–ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)"
    )
    
    return parser.parse_args()


def clear_screen():
    """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞."""
    os.system('clear' if os.name == 'posix' else 'cls')


def print_action_info(action: int, step: int):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–π—Å—Ç–≤–∏–∏."""
    action_names = {
        0: "–í–õ–ï–í–û (h)",
        1: "–í–ù–ò–ó (j)", 
        2: "–í–í–ï–†–• (k)",
        3: "–í–ü–†–ê–í–û (l)"
    }
    
    action_name = action_names.get(action, f"–ù–ï–ò–ó–í–ï–°–¢–ù–û ({action})")
    print(f"–®–∞–≥ {step}: –î–µ–π—Å—Ç–≤–∏–µ = {action_name}")


def run_rollout(model: PPO, 
                env_instance: env.RogueEnv, 
                num_episodes: int,
                max_steps: int,
                delay: float,
                deterministic: bool,
                render: bool) -> None:
    """
    –ó–∞–ø—É—Å–∫ rollout –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞.
    
    Args:
        model: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å PPO
        env_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä —Å—Ä–µ–¥—ã RogueEnv
        num_episodes: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤
        max_steps: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ —ç–ø–∏–∑–æ–¥–µ
        delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
        deterministic: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫—É—é –ø–æ–ª–∏—Ç–∏–∫—É
        render: –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    """
    
    total_rewards = []
    total_steps = []
    
    for episode in range(num_episodes):
        print(f"\n{'='*60}")
        print(f"–≠–ü–ò–ó–û–î {episode + 1}/{num_episodes}")
        print(f"{'='*60}")
        
        # –°–±—Ä–æ—Å —Å—Ä–µ–¥—ã
        obs, info = env_instance.reset()
        episode_reward = 0.0
        episode_steps = 0
        
        print(f"–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–µ–¥—ã (—ç–ø–∏–∑–æ–¥ {episode + 1}):")
        if render:
            env_instance.render()
            print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {info}")
        
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        if delay > 0:
            time.sleep(delay * 2)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —ç–ø–∏–∑–æ–¥–∞
        for step in range(max_steps):
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            action, _states = model.predict(obs, deterministic=deterministic)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º numpy –º–∞—Å—Å–∏–≤ –≤ —Å–∫–∞–ª—è—Ä, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if isinstance(action, np.ndarray):
                action = action.item()
            
            if render:
                clear_screen()
                print(f"–≠–ü–ò–ó–û–î {episode + 1}/{num_episodes}")
                print_action_info(action, step + 1)
                print("-" * 40)
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            obs, reward, terminated, truncated, info = env_instance.step(action)
            
            episode_reward += reward
            episode_steps += 1
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if render:
                env_instance.render()
                print("-" * 40)
                print(f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —à–∞–≥: {reward:.4f}")
                print(f"–û–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {episode_reward:.4f}")
                print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {info}")
                
                if terminated:
                    print("üèÅ –≠–ü–ò–ó–û–î –ó–ê–í–ï–†–®–ï–ù –°–†–ï–î–û–ô")
                elif truncated:
                    print("‚è∞ –≠–ü–ò–ó–û–î –ü–†–ï–†–í–ê–ù –ü–û –í–†–ï–ú–ï–ù–ò")
            else:
                # –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ –±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—è
                print(f"–®–∞–≥ {step + 1}: –¥–µ–π—Å—Ç–≤–∏–µ={action}, –Ω–∞–≥—Ä–∞–¥–∞={reward:.4f}, "
                      f"–æ–±—â–∞—è_–Ω–∞–≥—Ä–∞–¥–∞={episode_reward:.4f}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞
            if terminated or truncated:
                break
                
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
            if delay > 0:
                time.sleep(delay)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ø–∏–∑–æ–¥–∞
        total_rewards.append(episode_reward)
        total_steps.append(episode_steps)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–ü–ò–ó–û–î–ê {episode + 1}:")
        print(f"   –û–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {episode_reward:.4f}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {episode_steps}")
        print(f"   –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —à–∞–≥: {episode_reward/max(episode_steps, 1):.4f}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —ç–ø–∏–∑–æ–¥–∞–º–∏
        if episode < num_episodes - 1 and delay > 0:
            print(f"\n–ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —ç–ø–∏–∑–æ–¥–æ–º...")
            time.sleep(delay * 3)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*60}")
    print("–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*60}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤: {num_episodes}")
    print(f"–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞: {np.mean(total_rewards):.4f} ¬± {np.std(total_rewards):.4f}")
    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {np.min(total_rewards):.4f}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {np.max(total_rewards):.4f}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {np.mean(total_steps):.1f} ¬± {np.std(total_steps):.1f}")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {np.sum(total_steps)}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    args = parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ checkpoint'–∞
    if not os.path.exists(args.checkpoint_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª checkpoint'–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.checkpoint_path}")
        sys.exit(1)
    
    if not args.checkpoint_path.endswith('.zip'):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª checkpoint'–∞ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .zip")
        sys.exit(1)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
    print(f"üìÅ Checkpoint: {args.checkpoint_path}")
    print(f"üéÆ –≠–ø–∏–∑–æ–¥–æ–≤: {args.episodes}")
    print(f"üë£ –ú–∞–∫—Å. —à–∞–≥–æ–≤: {args.max_steps}")
    print(f"‚è±Ô∏è  –ó–∞–¥–µ—Ä–∂–∫–∞: {args.delay}s")
    print(f"üéØ –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏–π: {args.deterministic}")
    print(f"üëÅÔ∏è  –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {not args.no_render}")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–µ–¥—ã
        print("\nüèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–µ–¥—ã...")
        rogue_env = env.RogueEnv(max_steps=args.max_steps)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏–∑ {args.checkpoint_path}...")
        model = PPO.load(args.checkpoint_path)
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
        print(f"   –ü–æ–ª–∏—Ç–∏–∫–∞: {model.policy}")
        print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–π: {model.observation_space}")
        print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π: {model.action_space}")
        
        # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        print("\nüé¨ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é...")
        run_rollout(
            model=model,
            env_instance=rogue_env,
            num_episodes=args.episodes,
            max_steps=args.max_steps,
            delay=args.delay,
            deterministic=args.deterministic,
            render=not args.no_render
        )
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
        
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—Ä–µ–¥—ã
        try:
            rogue_env.close()
            print("üîí –°—Ä–µ–¥–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        except:
            pass


if __name__ == "__main__":
    main()
